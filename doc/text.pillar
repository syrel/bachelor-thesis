! Text ModelIn order to display and edit text, an editor requires a text model that provides text modification and enumeration api. In a context of text editor under ==Text== we understand an object that consists of a collection of characters with a set of attributes applied on those characters and a number of api methods to support text modifications such as ==insert:== or ==delete:==. Additionally,text should play a role of sequenceable and indexable collection, allowing uses to iterate over all characters in a natural ordered way. Being indexable is also an essential property of a text model, since text stylers require text to have characters accessible by index. It is a consequence of a fact that code parsers create an AST which consists of nodes bound to original text with the help of integer intervals that are later used by a text styler to apply attributes on a piece of text defined by that ineteger intervals in a form of a ==[from, to]== tuple.One the main requirements for the moldable editor is an ability to manipulate large pieces of text that consist of millions of characters and sometimes even more. It means that choosing an appropriate data structure for storing text is crusial. While looking for a data structure that would fit the needs of the moldable editor we found out that there is no the best data structure that is the only choice. It turned out that depending on a context and the way a text editor will be used it may be important to be able to select one or another data structure. Not to mention is the fact that text data structure should be choosen during early development stages, before the editor becomes usable. That is why the text model of the moldable editor is data structure independent and only defines a public api. In order for it to be used by a text editor developers should create concrete implemenations of that api with the data structure of choise as a backend. In the following section we will look at different data structures being used by text editors and compare them.! Text data structuresReference:Charles Crowley. "Data Structures for Text Sequences"(http://www.cs.unm.edu/~crowley/papers/sds.pdf)!! PharoIn Pharo there already exist two text models based on different data structures: one is ==Text== which is used by both Morphic and Rubric text editors, and ==TxModel== used by TxText editor. In the following sections we will compare and evaluate those text models regarding various properties such as ability to store, access and modify large pieces of text or whether they allow developers to embed non-textual object within text.!!! ==Text== model of Morphic and Rubric text editors==Text== is a default Pharo text model. It stores a collection of characters and a set of attributes separately. Characters are represented with the help of ==ByteString== which is nothing else than an immutable array of characters. It means that every text modification such as insertion or deletion requires it to allocate and copy the whole characters array while replacing a subsequence of characters with a requested one. Thus, text modifications are in fact linear time algorithms, which is unacceptably slow when text size grows over hundreds of thousands of characters.!! !! RopeReference:Boehm, Hans-J; Atkinson, Russ; Plass, Michael (December 1995). "Ropes: an Alternative to Strings" (PDF). Software—Practice & Experience. New York, NY, USA: John Wiley & Sons, Inc. 25 (12): 1315–1330. doi:10.1002/spe.4380251203.(http://citeseer.ist.psu.edu/viewdoc/download?doi=10.1.1.14.9450&rep=rep1&type=pdf)